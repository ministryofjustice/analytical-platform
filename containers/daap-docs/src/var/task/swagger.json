{
  "openapi": "3.0.3",
  "info": {
    "title": "Data Product API",
    "description": "The Data Product API docs are based on the OpenAPI 3.0 specification.",
    "version": "0.0.1"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://our-cloudfront-mask-for-the-api/sandbox"
    },
    {
      "url": "https://our-cloudfront-mask-for-the-api/dev"
    }
  ],
  "paths": {
    "/data-product/{data-product-name}/table/{table-name}/upload": {
      "get": {
        "tags": [
          "Upload Data"
        ],
        "summary": "Get a presigned url to upload some data to an existing data product.",
        "description": "Returns a presigned url to post data to.",
        "operationId": "uploadData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadDataRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product for the table you wish to delete. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table you wish to delete. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteTable"
                },
                "examples": {
                  "Not string inputs": {
                    "summary": "Inputs not convertible to type string",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "data product name, table name or filename are not convertible to string type."
                        }
                      }
                    }
                  },
                  "File extension is invalid": {
                    "summary": "File extension is invalid",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "file extension is invalid."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteTable"
                },
                "examples": {
                  "Data product registration not found": {
                    "summary": "Data product registration not found",
                    "value": {
                      "statusCode": "404",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Data product registration relating to database not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/data-product/{data-product-name}/table/{table-name}/preview": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Preview a small sample records from a data product table.",
        "description": "Returns a small subset of 10 records.",
        "operationId": "preview",
        "parameters": [
          {
            "in": "query",
            "name": "database",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "table",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "examples": {
                  "example1": {
                    "summary": "Preview data",
                    "value": "| Header1      | Header2      | Header2Longerone |\n| Row 1 Data 1 | Row 1 Data 2 | 20231023T144052Z |\n| Row 2 Data 1 | Row 2 Data 2 | 20231024T144052Z |\n| Row 3 Data 1 | Row 3 Data 2 | 20231025T144052Z |\n"
                  },
                  "example_2": {
                    "summary": "Data product not found",
                    "value": "No data to display"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error response",
            "content": {
              "text/plain": {
                "example": "Data Product does not exist"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/data-product/register": {
      "post": {
        "tags": [
          "dataproduct"
        ],
        "summary": "Register (metadata for) a new Data Product that you want to upload to the Data Platform.",
        "description": "Registers the first version of your Data Product (by submitting it's metadata)  and enables you to proceed with uploading data.",
        "operationId": "registerDataProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataProductMetadata"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Data product name is missing, it must be specified in the metadata  against the 'name' key"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Sorry, GET isn't allowed."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Your data product already has a version 1 registered metadata."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data-product/{data-product-name}": {
      "post": {
        "tags": [
          "dataproduct"
        ],
        "summary": "Update (metadata for) an existing Data Product.",
        "description": "Creates a new minor version of the data product with updated metadata.",
        "operationId": "updateDataProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataProductMetadata"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product you want to add a schema to. This needs to be a registered data product name."
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "version"
                  ],
                  "properties": {
                    "version": {
                      "type": "string",
                      "example": "1.1"
                    }
                  },
                  "example": {
                    "version": "1.1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Data product name is missing, it must be specified in the metadata  against the 'name' key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data-product/{data-product-name}/table/{table-name}/schema": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Register a schema (blueprint of your table) for a new table in your Data Product that you want to upload to the Data Platform.",
        "description": "Registers the first version of your Data Product's table (by submitting its schema) and enables you to proceed with uploading data to it.",
        "operationId": "registerTableSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tableSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product you want to add a schema to. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table to create schema for. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": "Schema for {table-name} has been created in the {data-product-name} data product"
                  }
                }
              }
            }
          },
          "403": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Data product name is missing, it must be specified in the metadata  against the 'name' key"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Sorry, GET isn't allowed."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "schema"
        ],
        "summary": "Get the latest schema for a table.",
        "description": "Returns a json object describing the table.",
        "operationId": "getTableSchema",
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product that contains the table schema. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table with the schema. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation, response format https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/glue/client/get_table.html",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tableSchema"
                }
              }
            }
          },
          "404": {
            "description": "Data product or table schema not found"
          }
        }
      },
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Update a schema (blueprint of your table) for an existing table in your Data Product.",
        "description": "Use this to update the schema of your Data Product's existing tables. This will include when you want to add/remove columns, update descriptions of tables/columns and change data types of columns.",
        "operationId": "updateTableSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tableSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product the schema belongs to. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table to update schema for. This needs to be an existing table."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": {
                      "version": "v1.1",
                      "changes": {
                        "example_table": {
                          "columns": {
                            "removed_columns": "None",
                            "added_columns": [
                              "col2"
                            ],
                            "types_changed": "None",
                            "descriptions_changed": "None"
                          },
                          "non_column_fields": [
                            "tableDescription"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Body JSON must contain a schema object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data-product/{data-product-name}/table/{table-name}": {
      "delete": {
        "tags": [
          "delete table"
        ],
        "summary": "Delete a table and associated raw and curated data registered to an existing data product.",
        "operationId": "deleteTable",
        "description": "Deletes the Glue table, raw and curated data for all versions and issues a major version increase.",
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product for the table you wish to delete. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table you wish to delete. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": "Successfully deleted table 'table_name' and raw & curated data files"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteTable"
                },
                "examples": {
                  "Glue: Table Not Found": {
                    "summary": "Glue: Table Not Found",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Could not locate glue table 'table_name' in database 'data_product_name"
                        }
                      }
                    }
                  },
                  "Glue: Unexpected ClientError": {
                    "summary": "Glue: Unexpected ClientError",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Unexpected ClientError: "
                        }
                      }
                    }
                  },
                  "InvalidUpdate: Invalid schemas found in schema list": {
                    "summary": "InvalidUpdate: Invalid schemas found in schema list",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Invalid schemas found in schema_list: {schema_list}"
                        }
                      }
                    }
                  },
                  "InvalidUpdate: Updated metadata validation failed": {
                    "summary": "InvalidUpdate: Updated metadata validation failed",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "updated metadata validation failed"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "tableSchema": {
        "required": [
          "schema"
        ],
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/dataProductSchemaSchema"
          }
        }
      },
      "dataProductMetadata": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/dataProductMetadataSchema"
          }
        }
      },
      "dataProductMetadataSchema": {
        "$ref": "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform-environments/main/terraform/environments/data-platform/data-product-metadata-json-schema/v1.1.0/moj_data_product_metadata_spec.json"
      },
      "dataProductSchemaSchema": {
        "$ref": "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform-environments/main/terraform/environments/data-platform/data-product-table-schema-json-schema/v1.0.0/moj_data_product_table_spec.json"
      },
      "UploadDataRequest": {
        "required": [
          "database",
          "table",
          "contentMD5"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "example": "data_upload.csv"
          },
          "contentMD5": {
            "type": "string",
            "example": "YojAHEZqfNk6B8zNmmLQhw=="
          }
        }
      },
      "URL": {
        "type": "object",
        "required": [
          "url",
          "fields"
        ],
        "properties": {
          "url": {
            "type": "string",
            "example": "https://data-platform-products.s3.amazonaws.com/"
          },
          "fields": {
            "$ref": "#/components/schemas/fields"
          }
        }
      },
      "UploadDataResponse": {
        "type": "object",
        "required": [
          "URL"
        ],
        "properties": {
          "URL": {
            "$ref": "#/components/schemas/URL"
          }
        }
      },
      "fields": {
        "type": "object",
        "properties": {
          "x-amz-server-side-encryption": {
            "type": "string",
            "example": "AES256"
          },
          "x-amz-acl": {
            "type": "string",
            "example": "bucket-owner-full-control"
          },
          "x-amz-date": {
            "type": "string",
            "example": "20230609T130209Z"
          },
          "Content-MD5": {
            "type": "string",
            "example": "YojAHEZqfNk6B8zNmmLQhw=="
          },
          "Content-Type": {
            "type": "string",
            "example": "binary/octet-stream"
          },
          "key": {
            "type": "string",
            "example": "curated_data/test/test/extraction_timestamp=20230609T130209Z/452b1aef-ca12-46ff-9dbf-42cbc80412f0"
          },
          "x-amz-algorithm": {
            "type": "string",
            "example": "AWS4-HMAC-SHA256"
          },
          "x-amz-credential": {
            "type": "string",
            "example": "AKIAIOSFODNN7EXAMPLE/20230609/eu-west-2/s3/aws4_request"
          },
          "x-amz-security-token": {
            "type": "string",
            "example": "IQo..."
          },
          "x-amz-signature": {
            "type": "string",
            "example": "54a..."
          },
          "policy": {
            "type": "string",
            "example": "eyJ..."
          }
        }
      }
    },
    "requestBodies": {
      "upload_data_request": {
        "description": "Request to upload data to the data platform.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadDataRequest"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
