{
  "openapi": "3.0.3",
  "info": {
    "title": "Data Product API",
    "description": "This API allows you to register and manage Data Product metadata with the Data Platform, and upload data to it.",
    "version": "0.0.1"
  },
  "externalDocs": {
    "description": "Full technical documentation for the Data Platform",
    "url": "https://technical-documentation.data-platform.service.justice.gov.uk/"
  },
  "servers": [
    {
      "url": "https://our-cloudfront-mask-for-the-api/sandbox"
    },
    {
      "url": "https://our-cloudfront-mask-for-the-api/dev"
    }
  ],
  "paths": {
    "/data-product/{data-product-name}/table/{table-name}/upload": {
      "post": {
        "tags": [
          "data"
        ],
        "summary": "Get a presigned url to upload some data to an existing data product.",
        "description": "Returns a presigned url to post data to.",
        "operationId": "uploadData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadDataRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product for the table you wish to upload data to. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table you wish to upload data to. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Not string inputs": {
                    "summary": "Inputs not convertible to type string",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "data product name, table name or filename are not convertible to string type."
                        }
                      }
                    }
                  },
                  "File extension is invalid": {
                    "summary": "File extension is invalid",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "file extension is invalid."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "examples": {
                  "Data product registration not found": {
                    "summary": "Data product registration not found",
                    "value": {
                      "statusCode": "404",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Data product registration relating to database not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      }
    },
    "/data-product/{data-product-name}/table/{table-name}/preview": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Preview a small sample records from a data product table.",
        "description": "Returns a small subset of 10 records.",
        "operationId": "preview",
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "examples": {
                  "example1": {
                    "summary": "Preview data",
                    "value": "| Header1      | Header2      | Header2Longerone |\n| Row 1 Data 1 | Row 1 Data 2 | 20231023T144052Z |\n| Row 2 Data 1 | Row 2 Data 2 | 20231024T144052Z |\n| Row 3 Data 1 | Row 3 Data 2 | 20231025T144052Z |\n"
                  },
                  "example_2": {
                    "summary": "Data product not found",
                    "value": "No data to display"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error response",
            "content": {
              "text/plain": {
                "example": "Data Product does not exist"
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      }
    },
    "/data-product/register": {
      "post": {
        "tags": [
          "data product"
        ],
        "summary": "Register (metadata for) a new Data Product.",
        "description": "Registers the first version of your Data Product (by submitting it's metadata) and enables you to proceed with uploading data.",
        "operationId": "registerDataProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "metadata"
                ],
                "type": "object",
                "properties": {
                  "metadata": {
                    "$ref": "#/components/schemas/userDefinedMetadata"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Data product name is missing, it must be specified in the metadata  against the 'name' key"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Sorry, GET isn't allowed."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Your data product already has a version 1 registered metadata."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      }
    },
    "/data-product/{data-product-name}": {
      "put": {
        "tags": [
          "data product"
        ],
        "summary": "Update (metadata for) an existing Data Product.",
        "description": "Creates a new minor version of the data product with updated metadata.",
        "operationId": "updateDataProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "metadata"
                ],
                "type": "object",
                "properties": {
                  "metadata": {
                    "$ref": "#/components/schemas/userDefinedMetadata"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product you want to add a schema to. This needs to be a registered data product name."
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "version"
                  ],
                  "properties": {
                    "version": {
                      "type": "string",
                      "example": "1.1"
                    }
                  },
                  "example": {
                    "version": "1.1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Data product name is missing, it must be specified in the metadata  against the 'name' key"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "data product"
        ],
        "summary": "Delete an existing Data Product.",
        "description": "Deletes an existing Data Product.",
        "operationId": "deleteDataProduct",
        "parameters": [
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product you want to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "version"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully removed data product 'data_product_name'."
                    }
                  },
                  "example": {
                    "message": "Successfully removed data product 'data_product_name'."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      }
    },
    "/data-product/{data-product-name}/table/{table-name}/schema": {
      "post": {
        "tags": [
          "schema"
        ],
        "summary": "Register a schema (blueprint of your table) for a new table in your Data Product.",
        "description": "Registers the first version of your Data Product's table (by submitting its schema) and enables future uploads to be validated against it.",
        "operationId": "registerTableSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tableSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product you want to add a schema to. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table to create schema for. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": "Schema for {table-name} has been created in the {data-product-name} data product"
                  }
                }
              }
            }
          },
          "403": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Data product name is missing, it must be specified in the metadata  against the 'name' key"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Sorry, GET isn't allowed."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      },
      "get": {
        "tags": [
          "schema"
        ],
        "summary": "Get the latest schema for a table.",
        "description": "Returns a json object describing the table.",
        "operationId": "getTableSchema",
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product that contains the table schema. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table with the schema. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation, response format https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/glue/client/get_table.html",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tableSchema"
                }
              }
            }
          },
          "404": {
            "description": "Data product or table schema not found"
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "schema"
        ],
        "summary": "Update a schema (blueprint of your table) for an existing table in your Data Product.",
        "description": "Updates the schema of an existing table. Use this when you want to add/remove columns, update descriptions of tables/columns or change data types of columns.",
        "operationId": "updateTableSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tableSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product the schema belongs to. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table to update schema for. This needs to be an existing table."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": {
                      "version": "v1.1",
                      "changes": {
                        "example_table": {
                          "columns": {
                            "removed_columns": "None",
                            "added_columns": [
                              "col2"
                            ],
                            "types_changed": "None",
                            "descriptions_changed": "None"
                          },
                          "non_column_fields": [
                            "tableDescription"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": {
                      "message": "Body JSON must contain a schema object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      }
    },
    "/data-product/{data-product-name}/table/{table-name}": {
      "delete": {
        "tags": [
          "data"
        ],
        "summary": "Delete a table from all versions of a data product.",
        "operationId": "deleteTable",
        "description": "Issues a major version increase, and completely deletes the table from all version of the data product, including all raw and curated data.",
        "parameters": [
          {
            "in": "path",
            "name": "data-product-name",
            "required": true,
            "example": "my_data_product",
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The name of the data product for the table you wish to delete. This needs to be a registered data product name."
          },
          {
            "in": "path",
            "name": "table-name",
            "required": true,
            "example": "table_1",
            "schema": {
              "type": "string",
              "minimum": 1,
              "maximum": 128
            },
            "description": "The name of the table you wish to delete. Allows lowercase alphanumeric characters and \"_\"."
          },
          {
            "in": "header",
            "name": "authorizationToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": "Successfully deleted table 'table_name' and raw & curated data files"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Glue: Table Not Found": {
                    "summary": "Glue: Table Not Found",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Could not locate glue table 'table_name' in database 'data_product_name"
                        }
                      }
                    }
                  },
                  "Glue: Unexpected ClientError": {
                    "summary": "Glue: Unexpected ClientError",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Unexpected ClientError: "
                        }
                      }
                    }
                  },
                  "InvalidUpdate: Invalid schemas found in schema list": {
                    "summary": "InvalidUpdate: Invalid schemas found in schema list",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "Invalid schemas found in schema_list: {schema_list}"
                        }
                      }
                    }
                  },
                  "InvalidUpdate: Updated metadata validation failed": {
                    "summary": "InvalidUpdate: Updated metadata validation failed",
                    "value": {
                      "statusCode": "400",
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "body": {
                        "error": {
                          "message": "updated metadata validation failed"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizationToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "tableSchema": {
        "required": [
          "schema"
        ],
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/dataProductSchemaSchema"
          }
        }
      },
      "userDefinedMetadata": {
        "type": "object",
        "title": "User-defined Data Product Metadata",
        "description": "Settable metadata for a Data Product",
        "required": [
          "name",
          "description",
          "domain",
          "dataProductOwner",
          "dataProductOwnerDisplayName",
          "email",
          "status",
          "dpiaRequired",
          "retentionPeriod"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Data Product. Must contain only lowercase letters, numbers, and the underscore character.",
            "pattern": "^[a-z0-9_]+$",
            "example": "my_data_product"
          },
          "description": {
            "type": "string",
            "description": "Detailed description about what functional area this Data Product is representing, what purpose it has and business related information.",
            "example": "this data product hold lots of useful information I want to share with those who may have use for it."
          },
          "domain": {
            "type": "string",
            "description": "The identifier of the domain this Data Product belongs to. Should be one of HQ, HMPPS, OPG, LAA, HMCTS, CICA, or Platforms",
            "example": "HMPPS"
          },
          "dataProductOwner": {
            "type": "string",
            "description": "Data Product owner, the unique identifier of the actual user that owns, manages, and receives notifications about the Data Product. To make it technology independent it is usually the email address of the owner.",
            "example": "jane.doe@justice.gov.uk"
          },
          "dataProductOwnerDisplayName": {
            "type": "string",
            "description": "The human-readable version of dataProductOwner",
            "example": "Jane Doe"
          },
          "dataProductMaintainer": {
            "type": "string",
            "description": "Secondary party who is able to approve DPIA access requests, but who may or may not be legally responsible for the data",
            "example": "example.information.asset.owner@justice.gov.uk"
          },
          "dataProductMaintainerDisplayName": {
            "type": "string",
            "description": "The human-readable version of dataProductMaintainer",
            "example": "Jonny Data"
          },
          "email": {
            "type": "string",
            "description": "point of contact between consumers and maintainers of the Data Product. It could be the owner or a distribution list, but must be reliable and responsive.",
            "example": "jane.doe@justice.gov.uk"
          },
          "status": {
            "type": "string",
            "description": "this is an enum representing the status of this version of the Data Product. Allowed values are: [draft|published|retired]. This is a metadata that communicates the overall status of the Data Product but is not reflected to the actual deployment status.",
            "enum": [
              "draft",
              "published",
              "retired"
            ]
          },
          "dpiaRequired": {
            "type": "boolean",
            "description": "Bool for if a data privacy impact assessment (dpia) is required to access this data product",
            "example": true
          },
          "dpiaLocation": {
            "type": "string",
            "description": "Data Privacy Impact Assessment (DPIA) file s3 location for this data product. Generated by data platform."
          },
          "retentionPeriod": {
            "type": "integer",
            "description": "Retention period of the data in this data product in days.",
            "example": 3650
          },
          "tags": {
            "type": "object",
            "description": "Additional tags to add.",
            "example": {
              "sandbox": true
            }
          }
        },
        "additionalProperties": false
      },
      "dataProductMetadataSchema": {
        "title": "Data Product metadata",
        "description": "All metadata associated with a Data Product",
        "allOf": [
          {
            "$ref": "#/components/schemas/userDefinedMetadata"
          },
          {
            "properties": {
              "version": {
                "type": "string",
                "description": "Data product version of form [major].[minor]. Generated by data platform."
              },
              "id": {
                "type": "string",
                "description": "Data product unique id. Generated by data platform.",
                "example": "dp:civil-courts-data:v1.1"
              },
              "lastUpdated": {
                "type": "string",
                "description": "Last data upload date to this data product. Generated by data platform."
              },
              "creationDate": {
                "type": "string",
                "description": "Creation date of the data product. Generated by data platform."
              },
              "s3Location": {
                "type": "string",
                "description": "S3 path to data in this data product. Generated by data platform."
              },
              "rowCount": {
                "type": "object",
                "description": "Total row count of all tables in the data product, as a heuristic. Generated by data platform."
              },
              "schemas": {
                "type": "array",
                "description": "This contains a list of schemas or tables that are part of the data product. Generated by data platform"
              }
            }
          }
        ]
      },
      "dataProductSchemaSchema": {
        "$ref": "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform-environments/main/terraform/environments/data-platform/data-product-table-schema-json-schema/v1.0.0/moj_data_product_table_spec.json"
      },
      "UploadDataRequest": {
        "required": [
          "filename",
          "contentMD5"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "example": "data_upload.csv"
          },
          "contentMD5": {
            "type": "string",
            "example": "YojAHEZqfNk6B8zNmmLQhw=="
          }
        }
      },
      "URL": {
        "type": "object",
        "required": [
          "url",
          "fields"
        ],
        "properties": {
          "url": {
            "type": "string",
            "example": "https://data-platform-products.s3.amazonaws.com/"
          },
          "fields": {
            "$ref": "#/components/schemas/fields"
          }
        }
      },
      "UploadDataResponse": {
        "type": "object",
        "required": [
          "URL"
        ],
        "properties": {
          "URL": {
            "$ref": "#/components/schemas/URL"
          }
        }
      },
      "fields": {
        "type": "object",
        "properties": {
          "x-amz-server-side-encryption": {
            "type": "string",
            "example": "AES256"
          },
          "x-amz-acl": {
            "type": "string",
            "example": "bucket-owner-full-control"
          },
          "x-amz-date": {
            "type": "string",
            "example": "20230609T130209Z"
          },
          "Content-MD5": {
            "type": "string",
            "example": "YojAHEZqfNk6B8zNmmLQhw=="
          },
          "Content-Type": {
            "type": "string",
            "example": "binary/octet-stream"
          },
          "key": {
            "type": "string",
            "example": "curated_data/test/test/extraction_timestamp=20230609T130209Z/452b1aef-ca12-46ff-9dbf-42cbc80412f0"
          },
          "x-amz-algorithm": {
            "type": "string",
            "example": "AWS4-HMAC-SHA256"
          },
          "x-amz-credential": {
            "type": "string",
            "example": "AKIAIOSFODNN7EXAMPLE/20230609/eu-west-2/s3/aws4_request"
          },
          "x-amz-security-token": {
            "type": "string",
            "example": "IQo..."
          },
          "x-amz-signature": {
            "type": "string",
            "example": "54a..."
          },
          "policy": {
            "type": "string",
            "example": "eyJ..."
          }
        }
      }
    },
    "requestBodies": {
      "upload_data_request": {
        "description": "Request to upload data to the data platform.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadDataRequest"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "authorizationToken": {
        "type": "apiKey",
        "name": "authorizationToken",
        "in": "header"
      }
    }
  }
}
