---
owner_slack: "#analytical-platform-notifications"
title: Analytical Platform Architectural Diagrams
last_reviewed_on: 2025-10-17
review_in: 6 months
---

# <%= current_page.data.title %>

These pages document the technical and logical architecture that makes up the Analytical Platform (AP).

To ease understanding and maintenance of these diagrams, we provide a number of diagrams at varying levels of detail. Higher level diagrams attempt to aid understanding of the platform as a whole, but omit engineering detail. Other, more detailed diagrams may document parts of the platform in more detail and omit high-level context.

These diagrams are not sacred objects - we encourage developers, engineers and others, if they feel comfortable, to submit updates and improvements. For more information see [contributing and updating](#contributing-and-updating) below.

## High level diagrams

These two diagrams should be sufficient for anyone who is looking for a quick, high-level overview of the components which comprise the Analytical Platform. Below is an index of more detailed diagrams.

### High level context (C4) diagram

This is the highest level of abstraction and provides an overview of the entire platform. It shows the system and its external dependencies, such as users, external systems, and APIs. The intended audience is everybody, both technical and non-technical.

![C4 level 1 Diagram](./c4/c4-model-level1.excalidraw.png)

### High level architecture

At a high level, the AP exposes services which enable users to:

- Upload or transfer data
- Store data
- Transform data
- Manage access to data
- Query and analyse data
- Disseminate analysis

This diagram shows the logical components, and the AWS services used to deliver those services.

![High level architecture](ap-hld.excalidraw.png)

## List of diagrams

### High level

- [High level context (C4) diagrams](./c4/c4-diagrams.html.md.erb). These represent and its external dependencies, such as users, external systems, and APIs. The intended audience is both technical and non-technical people.
- [Wardley maps](./wardley-maps/wardley-maps.html.md.erb). These offer a visual framework to understand and plan the evolution of the AP. They help map out system components, their dependencies, and their maturity.
- [AWS accounts diagram](./architecture-diagrams/aws-account-view.excalidraw.png). Documents key AP components, the AWS accounts in which they are hosted, and key interactions between those accounts.

## Contributing and updating

We created these diagrams using the open source tool [Excalidraw](https://docs.excalidraw.com/). The files have `.png` appended onto the filename, e.g `diagram.excalidraw.png`. This allows the editors below to manipulate and version the files without the need to export after every change. It also allows the GitHub user interface to display the diagrams as images.

Excalidraw supports several styles, ranging from "rough sketch" to more formal. Athough we love the rougher "sloppiness" style and the handwriting font, **we ask that diagrams look more formal** - straight clean lines, a sans-serif font etc.

This helps some users with readability, and also the "rough sketch" style can appear unprofessional or unfinished to other teams who are more used to diagramming software like draw.io or Visio.

If you would like to edit Excalidraw files, then use one of the following methods.

- In GitHub on the web using [vscode.dev](https://github.dev/ministryofjustice/analytical-platform/tree/main/docs/diagrams) with the [Excalidraw extension](https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor)

> Recommended for small changes, requires no software.

- Using [Visual Studio Code](https://code.visualstudio.com/download) with the [Excalidraw extension](https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor). Create a branch for your changes, submit a pull request and the approver will see a visual comparsion of your changes.

> Recommended for creating diagrams.

- Using the web version of [Excalidraw](https://excalidraw.com/) and opening the the cloned, or downloaded [files](https://github.com/ministryofjustice/analytical-platform/tree/main/source/documentation/diagrams)

> Recommended for small group sessions using [live collaboration](https://blog.excalidraw.com/building-excalidraw-p2p-collaboration-feature/)
> Diagrams created this way can get lost or forgotten, especially if the author moves teams. We recommend once you are happy with the online version, you use Excalidraw's "download file" feature to add the diagram to this repository. Note that the downloaded file will have a `.excalidraw` file extension. To make it work in VS Code, you need to change the extension to `.excalidraw.png` (and accept the warning your operating system gives you about changing file extensions).
