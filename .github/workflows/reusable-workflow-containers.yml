---
on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      image:
        type: string
        required: true

jobs:
  prepare-environment:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.prepare_environment.outputs.name }}
      version: ${{ steps.prepare_environment.outputs.version }}
      registry: ${{ steps.prepare_environment.outputs.registry }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare Environment
        id: prepare_environment
        run: |
          echo "name=$(jq -r '.name' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_OUTPUT}"
          echo "version=$(jq -r '.version' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_OUTPUT}"
          echo "registry=$(jq -r '.registry' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_OUTPUT}"

  preflight-checks:
    if: github.ref != 'refs/heads/main'
    needs: [prepare-environment]
    name: Preflight Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Check Version (Docker Hub)
        if: needs.prepare-environment.outputs.registry == 'dockerhub'
        id: check_version_dockerhub
        run: |
          checkTag=$(skopeo list-tags docker://docker.io/ministryofjustice/data-platform-${{ needs.prepare-environment.outputs.name }} | jq -r --arg imageTag "${{ needs.prepare-environment.outputs.version }}" '.Tags | index($imageTag)')
          export checkTag

          if [[ -z "${imageTag}" ]]; then
            echo "tag_exists=false" >>"${GITHUB_ENV}"
          else
            echo "tag_exists=true" >>"${GITHUB_ENV}"
          fi

      - name: Check Version (GitHub Container Registry)
        if: needs.prepare-environment.outputs.registry == 'ghcr'
        id: check_version_ghcr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "${{ env.GH_TOKEN }}" | skopeo login ghcr.io --username ${{ github.actor }} --password-stdin

          imageTag="${{ needs.prepare-environment.outputs.version }}"

          if skopeo list-tags docker://ghcr.io/ministryofjustice/data-platform-${{ needs.prepare-environment.outputs.name }}; then
            image_exists=true
          else
            echo "image_exists=false" >>"${GITHUB_ENV}"
            echo "tag_exists=false" >>"${GITHUB_ENV}"
          fi

          if [[ "${image_exists}" == "true" ]]; then
            checkTag=$(skopeo list-tags docker://ghcr.io/ministryofjustice/data-platform-${{ needs.prepare-environment.outputs.name }} | jq -r --arg imageTag "${{ needs.prepare-environment.outputs.version }}" '.Tags | index($imageTag)')
            export checkTag

            if [[ -z "${imageTag}" ]]; then
              echo "tag_exists=false" >>"${GITHUB_ENV}"
            else
              echo "tag_exists=true" >>"${GITHUB_ENV}"
            fi
          fi

      - name: Prepare ECR Configuration
        if: needs.prepare-environment.outputs.registry == 'ecr'
        id: prepare_ecr_configuration
        run: |
          echo "ecr_role=$(jq -r '.ecr.role' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"
          echo "ecr_account=$(jq -r '.ecr.account' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"
          echo "ecr_region=$(jq -r '.ecr.region' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"
          echo "ecr_repository=$(jq -r '.ecr.repository' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"

      - name: Configure AWS Credentials
        if: needs.prepare-environment.outputs.registry == 'ecr'
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          aws-region: ${{ env.ecr_region }}
          role-to-assume: ${{ env.ecr_role }}

      - name: Login to Amazon ECR
        if: needs.prepare-environment.outputs.registry == 'ecr'
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Check Version (ECR)
        if: needs.prepare-environment.outputs.registry == 'ecr'
        id: check_version_ecr
        run: |
          imageTag='"${{ needs.prepare-environment.outputs.version }}"'
          checkImageTagExists=$(aws ecr describe-images \
            --registry-id "${{ env.ecr_account }}" \
            --repository-name "${{ env.ecr_repository }}" | grep -F ${imageTag} || echo "false")

          if [[ "${checkImageTagExists}" == "false" ]]; then
            echo "tag_exists=false" >>"${GITHUB_ENV}"
          else
            echo "tag_exists=true" >>"${GITHUB_ENV}"
          fi

      - name: Check CHANGELOG Updates
        id: check_changelog_updates
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mainSha=$(gh api --method GET /repos/"${GITHUB_REPOSITORY}"/contents/containers/${{ inputs.image }}/CHANGELOG.md --field ref="main" | jq -r '.sha')
          branchSha=$(gh api --method GET /repos/"${GITHUB_REPOSITORY}"/contents/containers/${{ inputs.image }}/CHANGELOG.md --field ref="${GITHUB_HEAD_REF}" | jq -r '.sha')

          if [[ -z "${mainSha}" ]]; then
            SHA not found for main branch, assuming CHANGELOG.md does not exist
          elif [[ -z "${branchSha}" ]]; then
            SHA not found for "${GITHUB_HEAD_REF}" branch, assuming CHANGELOG.md does not exist
            "changelog_updated=false" >>"${GITHUB_ENV}"
          elif [[ "${mainSha}" == "${branchSha}" ]]; then
            echo "CHANGELOG.md matches main branch, needs to be updated"
            echo "changelog_updated=false" >>"${GITHUB_ENV}"
          elif [[ "${mainSha}" != "${branchSha}" ]]; then
            echo "CHANGELOG.md does not match main branch, does not need to be updated"
            echo "changelog_updated=true" >>"${GITHUB_ENV}"
          fi

      - name: Evaluate Checks
        id: evaluate_checks
        run: |
          echo "# Preflight Checks" >>"${GITHUB_STEP_SUMMARY}"

          if [[ "${{ env.tag_exists }}" == "true" ]]; then
            echo "FAIL: Container tag already exists" >>"${GITHUB_STEP_SUMMARY}"
            export failBuild="true"
          else
            echo "OK: Container tag does not exist" >>"${GITHUB_STEP_SUMMARY}"
            export failBuild="false"
          fi

          if [[ "${{ env.changelog_updated }}" == "true" ]]; then
            echo "OK: CHANGELOG.md has been updated" >>"${GITHUB_STEP_SUMMARY}"
            export failBuild="false"
          elif [[ "${{ env.changelog_updated }}" == "false" ]]; then
            echo "FAIL: CHANGELOG.md needs to be updated" >>"${GITHUB_STEP_SUMMARY}"
            export failBuild="true"
          fi

          if [[ "${failBuild}" == "true" ]]; then
            exit 1
          fi

  build-scan:
    if: github.ref != 'refs/heads/main'
    needs: [prepare-environment, preflight-checks]
    name: Build and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Build Image
        id: build_image
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: containers/${{ inputs.image }}
          file: containers/${{ inputs.image }}/Dockerfile
          push: false
          load: true
          tags: ${{ needs.prepare-environment.outputs.name }}:${{ needs.prepare-environment.outputs.version }}

      - name: Scan Image
        id: scan_image
        uses: aquasecurity/trivy-action@2b6a709cf9c4025c5438138008beaddbb02086f0 # v0.14.0
        with:
          image-ref: ${{ needs.prepare-environment.outputs.name }}:${{ needs.prepare-environment.outputs.version }}
          exit-code: 1
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL

      - name: Upload SARIF
        if: always()
        id: upload_sarif
        uses: github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a # v2.2.7
        with:
          sarif_file: trivy-results.sarif

  build-push-dockerhub:
    if: (github.ref == 'refs/heads/main') && (needs.prepare-environment.outputs.registry == 'dockerhub')
    needs: [prepare-environment]
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Login to Docker Hub
        id: docker_login
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        id: build_and_push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: containers/${{ inputs.image }}
          file: containers/${{ inputs.image }}/Dockerfile
          push: true
          tags: ministryofjustice/data-platform-${{ needs.prepare-environment.outputs.name }}:${{ needs.prepare-environment.outputs.version }}
          build-args: |
            VERSION=${{ needs.prepare-environment.outputs.version }}

  build-push-ghcr:
    if: (github.ref == 'refs/heads/main') && (needs.prepare-environment.outputs.registry == 'ghcr')
    needs: [prepare-environment]
    name: Build and Push to GitHub Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Login to GitHub Container Registry
        id: login_ghcr
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        id: build_and_push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: containers/${{ inputs.image }}
          file: containers/${{ inputs.image }}/Dockerfile
          push: true
          tags: ghcr.io/ministryofjustice/data-platform-${{ needs.prepare-environment.outputs.name }}:${{ needs.prepare-environment.outputs.version }}
          build-args: |
            VERSION=${{ needs.prepare-environment.outputs.version }}

  build-push-ecr:
    if: (github.ref == 'refs/heads/main') && (needs.prepare-environment.outputs.registry == 'ecr')
    needs: [prepare-environment]
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare ECR Configuration
        id: prepare_ecr_configuration
        run: |
          echo "ecr_role=$(jq -r '.ecr.role' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"
          echo "ecr_account=$(jq -r '.ecr.account' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"
          echo "ecr_region=$(jq -r '.ecr.region' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"
          echo "ecr_repository=$(jq -r '.ecr.repository' containers/${{ inputs.image }}/config.json)" >>"${GITHUB_ENV}"

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          aws-region: ${{ env.ecr_region }}
          role-to-assume: ${{ env.ecr_role }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: ${{ env.ecr_account }}

      - name: Build and Push
        id: build_and_push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: containers/${{ inputs.image }}
          file: containers/${{ inputs.image }}/Dockerfile
          push: true
          tags: ${{ env.ecr_account }}.dkr.ecr.${{ env.ecr_region }}.amazonaws.com/${{ env.ecr_repository }}:${{ needs.prepare-environment.outputs.version }}
          build-args: |
            VERSION=${{ needs.prepare-environment.outputs.version }}
