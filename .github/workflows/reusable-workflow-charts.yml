---
on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      chart:
        type: string
        required: true

jobs:
  prepare-environment:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.prepare_environment.outputs.name }}
      version: ${{ steps.prepare_environment.outputs.version }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare Environment
        id: prepare_environment
        run: |
          echo "name=$(yq '.name' charts/${{ inputs.chart }}/Chart.yaml)" >>"${GITHUB_OUTPUT}"
          echo "version=$(yq '.version' charts/${{ inputs.chart }}/Chart.yaml)" >>"${GITHUB_OUTPUT}"

  preflight-checks:
    if: github.ref != 'refs/heads/main'
    needs: [prepare-environment]
    name: Preflight Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Check Version (GitHub Container Registry)
        id: check_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "${{ env.GH_TOKEN }}" | skopeo login ghcr.io --username ${{ github.actor }} --password-stdin

          imageTag="${{ needs.prepare-environment.outputs.version }}"

          if skopeo list-tags docker://ghcr.io/ministryofjustice/data-platform-charts-${{ needs.prepare-environment.outputs.name }}; then
            image_exists=true
          else
            echo "image_exists=false" >>"${GITHUB_ENV}"
            echo "tag_exists=false" >>"${GITHUB_ENV}"
          fi

          if [[ "${image_exists}" == "true" ]]; then
            checkTag=$(skopeo list-tags docker://ghcr.io/ministryofjustice/data-platform-charts-${{ needs.prepare-environment.outputs.name }} | jq -r --arg imageTag "${{ needs.prepare-environment.outputs.version }}" '.Tags | index($imageTag)')
            export checkTag

            if [[ -z "${imageTag}" ]]; then
              echo "tag_exists=false" >>"${GITHUB_ENV}"
            else
              echo "tag_exists=true" >>"${GITHUB_ENV}"
            fi
          fi

      - name: Check CHANGELOG Updates
        id: check_changelog_updates
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mainSha=$(gh api --method GET /repos/"${GITHUB_REPOSITORY}"/contents/charts/${{ inputs.chart }}/CHANGELOG.md --field ref="main" | jq -r '.sha')
          branchSha=$(gh api --method GET /repos/"${GITHUB_REPOSITORY}"/contents/charts/${{ inputs.chart }}/CHANGELOG.md --field ref="${GITHUB_HEAD_REF}" | jq -r '.sha')

          if [[ -z "${mainSha}" ]]; then
            SHA not found for main branch, assuming CHANGELOG.md does not exist
          elif [[ -z "${branchSha}" ]]; then
            SHA not found for "${GITHUB_HEAD_REF}" branch, assuming CHANGELOG.md does not exist
            "changelog_updated=false" >>"${GITHUB_ENV}"
          elif [[ "${mainSha}" == "${branchSha}" ]]; then
            echo "CHANGELOG.md matches main branch, needs to be updated"
            echo "changelog_updated=false" >>"${GITHUB_ENV}"
          elif [[ "${mainSha}" != "${branchSha}" ]]; then
            echo "CHANGELOG.md does not match main branch, does not need to be updated"
            echo "changelog_updated=true" >>"${GITHUB_ENV}"
          fi

      - name: Evaluate Checks
        id: evaluate_checks
        run: |
          echo "::notice::# Preflight Checks"

          if [[ "${{ env.tag_exists }}" == "true" ]]; then
            echo "::error::FAIL: Container tag already exists"
            export failBuild="true"
          else
            echo "::notice::OK: Container tag does not exist"
            export failBuild="false"
          fi

          if [[ "${{ env.changelog_updated }}" == "true" ]]; then
            echo "::notice::OK: CHANGELOG.md has been updated"
            export failBuild="false"
          elif [[ "${{ env.changelog_updated }}" == "false" ]]; then
            echo "::error::FAIL: CHANGELOG.md needs to be updated"
            export failBuild="true"
          fi

          if [[ "${failBuild}" == "true" ]]; then
            exit 1
          fi

  lint:
    if: github.ref != 'refs/heads/main'
    needs: [prepare-environment, preflight-checks]
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Helm
        id: setup_helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5

      - name: Set up Helm Chart Testing
        id: setup_chart_testing
        uses: helm/chart-testing-action@e6669bcd63d7cb57cb4380c33043eebe5d111992 # v2.6.1

      - name: Lint Chart
        id: lint_chart
        run: |
          ct lint --charts charts/${{ inputs.chart }}

  publish:
    if: github.ref == 'refs/heads/main'
    needs: [prepare-environment]
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Login to GitHub Container Registry
        id: login_ghcr
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Helm
        id: setup_helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5

      - name: Package Chart
        id: package_chart
        run: |
          helm package charts/${{ needs.prepare-environment.outputs.name }} --destination .helm-deploy

      - name: Push Chart
        id: push_chart
        run: |
          helm push .helm-deploy/${{ needs.prepare-environment.outputs.name }}-${{ needs.prepare-environment.outputs.version }}.tgz oci://ghcr.io/ministryofjustice/data-platform-charts
