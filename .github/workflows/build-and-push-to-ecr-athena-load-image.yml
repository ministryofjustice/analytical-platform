name: Container images - data product athena load

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/build-and-push-to-ecr-athena-load-image.yml
      - container-images/data-as-a-product/athena-load/**

env:
  ACCOUNT_NUMBER: ${{ secrets.CORE_SHARED_SERVICES_ACCOUNT_ID }}

permissions: read-all

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      athena_load: ${{ steps.detect_changes.outputs.athena_load }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Detect changes
        id: detect_changes
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        with:
          filters: |
            athena_load:
              - 'container-images/data-as-a-product/athena-load/**'

  build:
    if: ${{ needs.detect-changes.outputs.athena_load != '[]' }}
    needs: [detect-changes]
    name: Build image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      security-events: write
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Prepare build parameters
        id: prepare
        run: |
          echo "name=$(jq -r '.name' container-images/data-as-a-product/athena-load/config.json)" >> ${GITHUB_ENV}
          echo "version=$(jq -r '.version' container-images/data-as-a-product/athena-load/config.json)" >> ${GITHUB_ENV}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        shell: bash
        run: |
          docker build -t ${{ env.ACCOUNT_NUMBER }}.dkr.ecr.eu-west-2.amazonaws.com/${{ env.name }}:${{ env.version }} .
          docker push ${{ env.ACCOUNT_NUMBER }}.dkr.ecr.eu-west-2.amazonaws.com/${{ env.name }}:${{ env.version }}
