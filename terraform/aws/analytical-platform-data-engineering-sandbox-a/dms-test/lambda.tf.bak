resource "aws_s3_bucket" "validation_lambda_function" {
  bucket = "${local.name}-validation-lambda-function"

  tags = local.tags
}

# Bucket to store validated data
resource "aws_s3_bucket" "validated_data" {
  bucket_prefix = "${local.name}-validated-data-"

  tags = local.tags
}

# Bucket to store invalid data
resource "aws_s3_bucket" "invalid_data" {
  bucket_prefix = "${local.name}-invalid-data-"

  tags = local.tags
}

# Bucket to store metadata used for the validation task
resource "aws_s3_bucket" "validation_metadata" {
  bucket_prefix = "${local.name}-validation-metadata-"

  tags = local.tags
}

# Policy document to allow write access to the validated_data, invalid_data buckets and read access to the validation_metadata bucket
data "aws_iam_policy_document" "validation_lambda_function" {
  statement {
    actions = [
      "s3:PutObject",
      "s3:ListBucket"
    ]

    resources = [
      "${aws_s3_bucket.validated_data.arn}/*",
      "${aws_s3_bucket.invalid_data.arn}/*",
    ]
  }

  statement {
    actions = [
      "s3:ListBucket",
      "s3:GetObject"
    ]

    resources = [
      aws_s3_bucket.validation_metadata.arn,
      "${aws_s3_bucket.validation_metadata.arn}/*"
    ]
  }

  statement {
    actions = [
      "s3:GetObject",
      "s3:DeleteObject"
    ]

    resources = [
      aws_s3_bucket.landing.arn,
      "${aws_s3_bucket.landing.arn}/*"
    ]
  }
}


module "validation_lambda_function" {
  source = "terraform-aws-modules/lambda/aws"

  function_name   = "${local.name}-validation"
  description     = "Lambda to validate DMS data output"
  handler         = "main.handler"
  runtime         = "python3.12"
  timeout         = 60
  architectures   = ["x86_64"]
  build_in_docker = true
  docker_image    = "test-dms"
  store_on_s3     = true
  s3_bucket       = aws_s3_bucket.validation_lambda_function.bucket

  attach_policy_json = true
  policy_json        = data.aws_iam_policy_document.validation_lambda_function.json

  environment_variables = {
    ENVIRONMENT      = "sandbox"
    PASS_BUCKET      = aws_s3_bucket.validated_data.bucket
    FAIL_BUCKET      = aws_s3_bucket.invalid_data.bucket
    METADATA_BUCKET  = aws_s3_bucket.validation_metadata.bucket
    METADATA_PATH    = ""
    SLACK_SECRET_KEY = "slack-secret-key" # TODO: Handle properly
  }

  source_path = [{
    path             = "${path.module}/validation-lambda/main.py"
    pip_tmp_dir      = "${path.module}/fixtures"
    pip_requirements = "${path.module}/validation-lambda/requirements.txt"
    # Exclude tests and dist-info directories from the deployment package
    patterns = [
      "!pyarrow/tests/?.*",
      "!numpy/tests/?.*",
      "!.*/.*dist-info/.*"
    ]
  }]

  tags = local.tags
}
